
/* CSC 231 - Lab 8: Introduction to Prolog */
/* Georgina Hutchins */
/* 03/26/15 */


/* Problem 1 Related */

/* Facts about who's male:*/

male(winston).
male(harry).
male(anthony).
male(gregory).
male(peter).

/* Facts about who's female */

female(diane).
female(georgina).
female(bella).
female(celeste).
female(olga).

/* Facts describing parent, child relationships */ 

/* (parent(x,y) --> x is the parent of y) */

parent(winston,harry).
parent(winston,georgina).
parent(winston,bella).
parent(diane,harry).
parent(diane,georgina).
parent(diane,bella).

parent(olga,winston).
parent(olga,celeste).
parent(anthony,diane).
parent(anthony,gregory).

parent(gregory,peter).


/* A definition for siblings - share the same parent */
siblings(X,Y) :- parent(Z,X), parent(Z,Y), X \= Y.

/* Definition for sister -- female sibling */
sister(X,Y) :- siblings(X,Y), female(X), X \= Y.
/* Definition for brother -- male sibling */
brother(X,Y) :- siblings(X,Y), male(X), X \= Y.

/* Definition for daughter -- female child (has parent) --> daughter(X,Y), X=daughter, Y=parent */
daughter(X,Y) :- parent(Y,X), female(X).

/* Definition for son -- male child (has parent) */
son(X,Y) :- parent(Y,X), male(X).

/* A definition for mother - a female parent -- ((mother(X,Y), x=mother, y=child))*/
mother(X,Y) :- parent(X,Y), female(X).

/* Definition for father -- male parent */
father(X,Y) :- parent(X,Y), male(X).

/* Alternate definitions for grandmother (mother's mother or father's mother). */
grandmother(X,Y) :- mother(X,Z), mother(Z,Y).
grandmother(X,Y) :- mother(X,Z), father(Z,Y).

/* Definitions for grandfather (mother's father or father's father) */
grandfather(X,Y) :- father(X,Z), mother(Z,Y).
grandfather(X,Y) :- father(X,Z), father(Z,Y).

/* Definition of aunt -- mother's sister or father's sister */
aunt(X,Y) :- sister(X,Z), mother(Z,Y).
aunt(X,Y) :- sister(X,Z), father(Z,Y).

/* Definition of uncle -- mother's brother or father's brother */
uncle(X,Y) :- brother(X,Z), mother(Z,Y).
uncle(X,Y) :- brother(X,Z), father(Z,Y).

/* Definition of cousin -- son of uncle, daughter of uncle, son of aunt, daughter of aunt */
cousin(X,Y) :- son(X,Z), uncle(Z,Y).
cousin(X,Y) :- daughter(X,Z), uncle(Z,Y).
cousin(X,Y) :- son(X,Z), aunt(Z,Y).
cousin(X,Y) :- daughter(X,Z), aunt(Z,Y).

/* Recursive definition of ancestor */
ancestor(X,Y) :- parent(X,Y).
ancestor(X,Y) :- parent(X,Z),ancestor(Z,Y).



/* Problem 2 Related */
/* No help here - review the arithmetic/equality operators and the recursion examples */

isnatural(0).
isnatural(X) :- X > 0, Y is X - 1, isnatural(Y).

factorial(0,1). 
factorial(A,B) :- A > 0, C is A - 1, factorial(C,D), B is A * D.

fibonacci(0,1).
fibonacci(1,1).
fibonacci(A,B) :- A > 1, C is A - 1, D is A - 2, fibonacci(C,E), fibonacci(D,F), B is E + F.


/* Problem 3 Related */

fulfilledCSMajor(Student) :- 
	taken(Student,cs,111), 
	taken(Student,cs,112), 
	taken(Student,cs,221), 
	taken(Student,cs,222), 
	taken(Student,cs,231), 
	taken(Student,cs,241),
	taken(Student,math,112),
	taken(Student,math,117),
	above300(Student),
	choice(Student).

above300(Student) :- 
	taken(Student,cs,A), A >= 300, 
	taken(Student,cs,B), B >= 300, B \= A, 
	taken(Student,cs,C), C >= 300, C \= B, C \= A,
	taken(Student,cs,D), D >= 300, D \= C, D \= B, D \= A.

choice(Student) :- taken(Student,math,121).
choice(Student) :- taken(Student,math,205).
choice(Student) :- taken(Student,math,206).


/* This student, studentA, has fulfilled the BS in CS major requirements */
taken(studentA,cs,111).
taken(studentA,cs,112).
taken(studentA,cs,211).
taken(studentA,cs,221).
taken(studentA,cs,222).
taken(studentA,cs,231).
taken(studentA,cs,241).
taken(studentA,math,112).
taken(studentA,math,117).
taken(studentA,math,121).
taken(studentA,cs,391).
taken(studentA,cs,385).
taken(studentA,cs,343).
taken(studentA,cs,341).

/* This student, studentB, has taken a lot, but has not fulfilled the */
/* BS in CS major requirements. */ 
taken(studentB,cs,111).
taken(studentB,cs,112).
taken(studentB,cs,221).
taken(studentB,cs,222).
taken(studentB,cs,231).
taken(studentB,cs,241).
taken(studentB,math,111).
taken(studentB,math,112).
taken(studentB,math,117).

/* This student, studentC, has not fulfilled the BS in CS major requirements */
taken(studentC,cs,101).
taken(studentC,cs,111).
taken(studentC,math,117).


/* This student, studentD, has taken a lot, but has not fulfilled the BS in CS major requirements */
taken(studentD,cs,111).
taken(studentD,cs,112).
taken(studentD,cs,211).
taken(studentD,cs,221).
taken(studentD,cs,222).
taken(studentD,cs,231).
taken(studentD,cs,241).
taken(studentD,math,112).
taken(studentD,math,117).
taken(studentD,math,121).
taken(studentD,cs,391).


